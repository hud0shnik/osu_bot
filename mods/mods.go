package mods

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat    Chat    `json:"chat"`
	Text    string  `json:"text"`
	Sticker Sticker `json:"sticker"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type Sticker struct {
	File_id string `json:"file_id"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ API

type OsuUserInfo struct {
	Error          string   `json:"error"`
	Username       string   `json:"username"`
	Names          []string `json:"previous_usernames"`
	AvatarUrl      string   `json:"avatar_url"`
	CountryCode    string   `json:"country_code"`
	GlobalRank     string   `json:"global_rank"`
	CountryRank    string   `json:"country_rank"`
	PP             string   `json:"pp"`
	PlayTime       string   `json:"play_time"`
	SSH            string   `json:"ssh"`
	SS             string   `json:"ss"`
	SH             string   `json:"sh"`
	S              string   `json:"s"`
	A              string   `json:"a"`
	RankedScore    string   `json:"ranked_score"`
	Accuracy       string   `json:"accuracy"`
	PlayCount      string   `json:"play_count"`
	TotalScore     string   `json:"total_score"`
	TotalHits      string   `json:"total_hits"`
	MaximumCombo   string   `json:"maximum_combo"`
	Replays        string   `json:"replays"`
	Level          string   `json:"level"`
	SupportLvl     string   `json:"support_level"`
	DefaultGroup   string   `json:"default_group"`
	IsOnline       string   `json:"is_online"`
	IsActive       string   `json:"is_active"`
	IsDeleted      string   `json:"is_deleted"`
	IsNat          string   `json:"is_nat"`
	IsModerator    string   `json:"is_moderator"`
	IsBot          string   `json:"is_bot"`
	IsSilenced     string   `json:"is_silenced"`
	IsRestricted   string   `json:"is_restricted"`
	IsLimitedBn    string   `json:"is_limited_bn"`
	IsSupporter    string   `json:"is_supporter"`
	ProfileColor   string   `json:"profile_color"`
	PmFriendsOnly  string   `json:"pm_friends_only"`
	PostCount      string   `json:"post_count"`
	FollowersCount string   `json:"follower_count"`
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Osu
func SendOsuInfo(botUrl string, update Update, username string) {

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
	if username == "" {
		username = "hud0shnik"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–µ–º—É API
	resp, err := http.Get("https://osustatsapi.vercel.app/api/user?type=string&id=" + username)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	if err != nil {
		log.Printf("http.Get error: %s", err)
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var user = new(OsuUserInfo)
	json.Unmarshal(body, &user)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if user.Username == "" {
		SendMsg(botUrl, update, user.Error)
		return
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞

	responseText := "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <b>" + user.Username + "</b>\n"

	if user.Names[0] != "" {
		responseText += "Aka " + user.Names[0] + "\n"
	}

	responseText += "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã " + user.CountryCode + "\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ –º–∏—Ä–µ <b>" + user.GlobalRank + "</b>\n" +
		"–†–µ–π—Ç–∏–Ω–≥ –≤ —Å—Ç—Ä–∞–Ω–µ <b>" + user.CountryRank + "</b>\n" +
		"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–π <b>" + user.Accuracy + "%</b>\n" +
		"PP <b>" + user.PP + "</b>\n" +
		"-------–∫–∞—Ä—Ç—ã---------\n" +
		"SSH: <b>" + user.SSH + "</b>\n" +
		"SH:   <b>" + user.SH + "</b>\n" +
		"SS:   <b>" + user.SS + "</b>\n" +
		"S:     <b>" + user.S + "</b>\n" +
		"A:     <b>" + user.A + "</b>\n" +
		"---------------------------\n" +
		"–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ <b>" + user.RankedScore + "</b>\n" +
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä <b>" + user.PlayCount + "</b>\n" +
		"–í—Å–µ–≥–æ –æ—á–∫–æ–≤ <b>" + user.TotalScore + "</b>\n" +
		"–í—Å–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π <b>" + user.TotalHits + "</b>\n" +
		"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ <b>" + user.MaximumCombo + "</b>\n" +
		"–†–µ–ø–ª–µ–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –¥—Ä—É–≥–∏–º–∏ <b>" + user.Replays + "</b>\n" +
		"–£—Ä–æ–≤–µ–Ω—å <b>" + user.Level + "</b>\n" +
		"---------------------------\n" +
		"–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ " + user.PlayTime + "\n" +
		"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ " + user.SupportLvl + "\n"

	if user.PostCount != "0" {
		responseText += "–ü–æ—Å—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä—É–º–µ " + user.PostCount + "\n"
	}

	if user.FollowersCount != "0" {
		responseText += "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ " + user.FollowersCount + "\n"
	}

	if user.IsOnline == "true" {
		responseText += "–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω\n"
	} else {
		responseText += "–°–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏\n"
	}

	if user.IsActive == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
	} else {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n"
	}

	if user.IsDeleted == "true" {
		responseText += "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω\n"
	}

	if user.IsBot == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞\n"
	}

	if user.IsNat == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ü–µ–Ω–∫–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–π\n"
	}

	if user.IsModerator == "true" {
		responseText += "–≠—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
	}

	if user.ProfileColor != "" {
		responseText += "–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è" + user.ProfileColor + "\n"
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendPict(botUrl, update, SendPhoto{
		PhotoUrl: user.AvatarUrl,
		Caption:  responseText,
	})
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Help(botUrl string, update Update) {
	SendMsg(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+"\n\n"+
		"/osu <u>username</u> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Osu")
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}
